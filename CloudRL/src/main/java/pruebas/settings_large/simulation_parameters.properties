# Simulation time in minutes
simulation_time=30
# initialization time (in seconds) : the time needed to generate all the resources, before starting the simulation
# Initialization time (in seconds): It is the time necessary to generate all the resources before starting the simulation (it is the initial offset of the graphs)
initialization_time=30
# If we want to do the simulations in parallel (with threads). If it is activated, you cannot see the graph in real time
parallel_simulation=false
# Interval between events (in seconds), typically between 0.1 and 1. You can put more (2, 3, 4, ...) but the more it is, the less precision you will have
update_interval=0.5
# Duration in seconds of the pause between iterations
pause_length=1

# end the simulation when the time ends or wait to all the tasks to get executed?
# it better to wait for all the tasks to get executed to get better results, however this may takes hours longer
# disabling this will gives you high tasks failure due to stopping simulation early (see the console) but it will decrease the simulation time
wait_for_all_tasks=true
# In case of waiting for the tasks, we wait at most (0 for unlimited)
wait_for_all_tasks_limit=120


# Show graphs in real time
display_real_time_charts=true
# Automatically close the graphs at the end of the simulation
auto_close_real_time_charts=true
# Graph refresh interval.
charts_update_interval=1
# Save the generated graphs
save_charts=true

# Simulation area in meters (the sides)
# If the device map is changed, remember to change the location of the edge datacenters (in the edge_datacenters.xml file)
length=2000
width=2000

# To enable the edge data centers to work cooperatively, we have to deploy one orchestrator on each edge device
# This means that the tasks will be transferred to the nearest Edge data center, which will decide where it will be executed on the cloud, 
# on another edge data center, or execute it locally on this data center.
# run the simulation with "enable_orchestrators=true" and then run it with "enable_orchestrators=false" to compare the results
enable_orchestrators=true
# deploy the orchestration node (Options: CLOUD, EDGE, or MIST, you can add your own by editing the  selectOrch() method in servermanager.java)  
# Edge means that every edge device orchestrates its tasks for itself
deploy_orchestrator=ALL
# CLOUD,EDGE,MIST,MIST_EDGE,ALL

# Task orchestrator offloading settings. You can use ',' to add multiple values
# Where the tasks can be sent (I leave ALL and use the Offloading algorithm to limit where they are sent)
orchestration_architectures=ALL
# CLOUD_ONLY,EDGE_ONLY,MIST_ONLY,MIST_AND_CLOUD,EDGE_AND_CLOUD,ALL

# offloading algorithms to be used
orchestration_algorithms=INCREASE_LIFETIME,LATENCY_ENERGY_AWARE,WEIGHT_GREEDY
# For complete simulations: ROUND_ROBIN,TRADE_OFF,TEST,RL,RL_MULTILAYER_DISABLED,RL_MULTILAYER
# RANDOM,RANDOM_GOOD,LOCAL,CLOSEST,MIST,EDGE,CLOUD,ROUND_ROBIN,TRADE_OFF,INCREASE_LIFETIME,LATENCY_ENERGY_AWARE,WEIGHT_GREEDY,TEST,RL,RL_MULTILAYER_DISABLED,RL_MULTILAYER,FUZZY_LOGIC

# Para el algoritmo RL
save_qtables=false
load_qtables=false


# WLAN range (in meters): Distance (radius) in which two devices (edge \u200B\u200Bdevices or edge datacents) can offload each other.
# If a device changes its location (by the mobility algorithm) and is now out of this range it will be considered as a failure caused by mobility.
edge_devices_range=200
# be carefull when setting the edge data centers coverage area when the EDGE_ONLY architecture is used,as some tasks may fail (because no resources found)
# so be sure that edge servers cover all the map. except if your scenario requires low coverage area
edge_datacenters_coverage=2000

# Number of edge devices in the MIST
# Minimum and maximum number of devices in the tests and how often it increases them
min_number_of_edge_devices=100
max_number_of_edge_devices=1000
edge_device_counter_size=100

# Speed \u200B\u200Bin meters per second of the edge devices that will use the defined mobility model. Use the value 0 to disable movement.
speed=1.4
 
# enable registration
# true: The device will download the application from the registry when receiving an offloaded task (the container size defined in applications.xml will be used)
# false: The device will directly execute the offloaded task without downloading anything.
enable_registry=false
# Where the containers are located (by default CLOUD). Other places can be defined by extending the default network model (defaultNetworkModel)
registry_mode=CLOUD


# Network settings. Everything is in megabit per second
# Bandwidth of the local wireless connection between edge devices
wlan_bandwidth=1300
# Bandwidth of the internet connection of the devices. The smaller it is, the longer the simulation will last.
wan_bandwidth=300
wan_propogation_delay=0.2
# wan speed (m/s)
wan_propogation_speed = 300000000
# If it is activated, more precise results will be obtained but the simulation will take longer.
realistic_network_model=false
# network update interval (in seconds) transmission update ( 0.1 to 1 = better accuracy but it takes longer, 2 or more = less details but faster simulation)
# default=1 (to minimize simulation time)
network_update_interval=1

# CPU allocation policy (TIME_SHARED=  containers , SPACE_SHARED= VM)
# choose : TIME_SHARED or SPACE_SHARED,  default = SPACE_SHARED
# time shared require will take lot of time as compared to space shared
Applications_CPU_allocation_policy=SPACE_SHARED

# Power model settings
# Energy consumed by each bit received or transmitted (Joul per bit: J/bit)
consumed_energy_per_bit=0.00000005
# amplifier energy dissipation in free space channel (Joul per bit per square meter : J/bit/m^2)
amplifier_dissipation_free_space=0.00000000001
# amplifier energy dissipation in multipath fading channel (Joul per bit per meter^4 : J/bit/m^4)
amplifier_dissipation_multipath=0.0000000000000013

# Log configuration
save_log_file=true
clear_output_folder=false
deep_log_enabled=false
